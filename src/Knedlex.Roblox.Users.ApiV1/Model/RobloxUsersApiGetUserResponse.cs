/*
 * Users Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Users.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Users.ApiV1.Model
{
    /// <summary>
    /// A response model representing user information.
    /// </summary>
    [DataContract(Name = "Roblox.Users.Api.GetUserResponse")]
    public partial class RobloxUsersApiGetUserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxUsersApiGetUserResponse" /> class.
        /// </summary>
        /// <param name="description">The user description..</param>
        /// <param name="created">When the user signed up..</param>
        /// <param name="isBanned">Whether or not the user is banned.</param>
        /// <param name="externalAppDisplayName">Unused, legacy attribute. For now always null to not disturb existing client code that might rely on its existence..</param>
        /// <param name="hasVerifiedBadge">The user&#39;s verified badge status..</param>
        /// <param name="id">The user Id..</param>
        /// <param name="name">The user name..</param>
        /// <param name="displayName">The user DisplayName..</param>
        public RobloxUsersApiGetUserResponse(string description = default(string), DateTime created = default(DateTime), bool isBanned = default(bool), string externalAppDisplayName = default(string), bool hasVerifiedBadge = default(bool), long id = default(long), string name = default(string), string displayName = default(string))
        {
            this.Description = description;
            this.Created = created;
            this.IsBanned = isBanned;
            this.ExternalAppDisplayName = externalAppDisplayName;
            this.HasVerifiedBadge = hasVerifiedBadge;
            this.Id = id;
            this.Name = name;
            this.DisplayName = displayName;
        }

        /// <summary>
        /// The user description.
        /// </summary>
        /// <value>The user description.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// When the user signed up.
        /// </summary>
        /// <value>When the user signed up.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Whether or not the user is banned
        /// </summary>
        /// <value>Whether or not the user is banned</value>
        [DataMember(Name = "isBanned", EmitDefaultValue = true)]
        public bool IsBanned { get; set; }

        /// <summary>
        /// Unused, legacy attribute. For now always null to not disturb existing client code that might rely on its existence.
        /// </summary>
        /// <value>Unused, legacy attribute. For now always null to not disturb existing client code that might rely on its existence.</value>
        [DataMember(Name = "externalAppDisplayName", EmitDefaultValue = false)]
        public string ExternalAppDisplayName { get; set; }

        /// <summary>
        /// The user&#39;s verified badge status.
        /// </summary>
        /// <value>The user&#39;s verified badge status.</value>
        [DataMember(Name = "hasVerifiedBadge", EmitDefaultValue = true)]
        public bool HasVerifiedBadge { get; set; }

        /// <summary>
        /// The user Id.
        /// </summary>
        /// <value>The user Id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// The user name.
        /// </summary>
        /// <value>The user name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The user DisplayName.
        /// </summary>
        /// <value>The user DisplayName.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxUsersApiGetUserResponse {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  IsBanned: ").Append(IsBanned).Append("\n");
            sb.Append("  ExternalAppDisplayName: ").Append(ExternalAppDisplayName).Append("\n");
            sb.Append("  HasVerifiedBadge: ").Append(HasVerifiedBadge).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
