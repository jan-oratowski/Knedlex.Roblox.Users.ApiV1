/*
 * Users Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Users.ApiV1.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Users.ApiV1.Model
{
    /// <summary>
    /// Request model for getting users by ids.
    /// </summary>
    [DataContract(Name = "Roblox.Users.Api.MultiGetByUserIdRequest")]
    public partial class RobloxUsersApiMultiGetByUserIdRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxUsersApiMultiGetByUserIdRequest" /> class.
        /// </summary>
        /// <param name="userIds">The user ids..</param>
        /// <param name="excludeBannedUsers">Whether or not the response should exclude banned users.</param>
        public RobloxUsersApiMultiGetByUserIdRequest(List<long> userIds = default(List<long>), bool excludeBannedUsers = default(bool))
        {
            this.UserIds = userIds;
            this.ExcludeBannedUsers = excludeBannedUsers;
        }

        /// <summary>
        /// The user ids.
        /// </summary>
        /// <value>The user ids.</value>
        [DataMember(Name = "userIds", EmitDefaultValue = false)]
        public List<long> UserIds { get; set; }

        /// <summary>
        /// Whether or not the response should exclude banned users
        /// </summary>
        /// <value>Whether or not the response should exclude banned users</value>
        [DataMember(Name = "excludeBannedUsers", EmitDefaultValue = true)]
        public bool ExcludeBannedUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxUsersApiMultiGetByUserIdRequest {\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  ExcludeBannedUsers: ").Append(ExcludeBannedUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
