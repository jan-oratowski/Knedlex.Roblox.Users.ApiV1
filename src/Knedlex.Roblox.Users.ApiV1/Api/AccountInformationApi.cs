/*
 * Users Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Knedlex.Roblox.Users.ApiV1.Client;
using Knedlex.Roblox.Users.ApiV1.Model;

namespace Knedlex.Roblox.Users.ApiV1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountInformationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the user&#39;s birthdate
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiBirthdateResponse</returns>
        RobloxUsersApiBirthdateResponse V1BirthdateGet(int operationIndex = 0);

        /// <summary>
        /// Get the user&#39;s birthdate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiBirthdateResponse</returns>
        ApiResponse<RobloxUsersApiBirthdateResponse> V1BirthdateGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update the user&#39;s birthdate
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object V1BirthdatePost(RobloxUsersApiBirthdateRequest request, int operationIndex = 0);

        /// <summary>
        /// Update the user&#39;s birthdate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1BirthdatePostWithHttpInfo(RobloxUsersApiBirthdateRequest request, int operationIndex = 0);
        /// <summary>
        /// Get the user&#39;s description
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiDescriptionResponse</returns>
        RobloxUsersApiDescriptionResponse V1DescriptionGet(int operationIndex = 0);

        /// <summary>
        /// Get the user&#39;s description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiDescriptionResponse</returns>
        ApiResponse<RobloxUsersApiDescriptionResponse> V1DescriptionGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update the user&#39;s description
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiDescriptionResponse</returns>
        RobloxUsersApiDescriptionResponse V1DescriptionPost(RobloxUsersApiDescriptionRequest request, int operationIndex = 0);

        /// <summary>
        /// Update the user&#39;s description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiDescriptionResponse</returns>
        ApiResponse<RobloxUsersApiDescriptionResponse> V1DescriptionPostWithHttpInfo(RobloxUsersApiDescriptionRequest request, int operationIndex = 0);
        /// <summary>
        /// Get the user&#39;s gender
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiGenderResponse</returns>
        RobloxUsersApiGenderResponse V1GenderGet(int operationIndex = 0);

        /// <summary>
        /// Get the user&#39;s gender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiGenderResponse</returns>
        ApiResponse<RobloxUsersApiGenderResponse> V1GenderGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update the user&#39;s gender
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object V1GenderPost(RobloxUsersApiGenderRequest request, int operationIndex = 0);

        /// <summary>
        /// Update the user&#39;s gender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1GenderPostWithHttpInfo(RobloxUsersApiGenderRequest request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountInformationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the user&#39;s birthdate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiBirthdateResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiBirthdateResponse> V1BirthdateGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the user&#39;s birthdate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiBirthdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiBirthdateResponse>> V1BirthdateGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the user&#39;s birthdate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1BirthdatePostAsync(RobloxUsersApiBirthdateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the user&#39;s birthdate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1BirthdatePostWithHttpInfoAsync(RobloxUsersApiBirthdateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the user&#39;s description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiDescriptionResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiDescriptionResponse> V1DescriptionGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the user&#39;s description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiDescriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiDescriptionResponse>> V1DescriptionGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the user&#39;s description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiDescriptionResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiDescriptionResponse> V1DescriptionPostAsync(RobloxUsersApiDescriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the user&#39;s description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiDescriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiDescriptionResponse>> V1DescriptionPostWithHttpInfoAsync(RobloxUsersApiDescriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the user&#39;s gender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiGenderResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiGenderResponse> V1GenderGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the user&#39;s gender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiGenderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiGenderResponse>> V1GenderGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the user&#39;s gender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1GenderPostAsync(RobloxUsersApiGenderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the user&#39;s gender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1GenderPostWithHttpInfoAsync(RobloxUsersApiGenderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountInformationApi : IAccountInformationApiSync, IAccountInformationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountInformationApi : IAccountInformationApi
    {
        private Knedlex.Roblox.Users.ApiV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInformationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountInformationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInformationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountInformationApi(string basePath)
        {
            this.Configuration = Knedlex.Roblox.Users.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Users.ApiV1.Client.GlobalConfiguration.Instance,
                new Knedlex.Roblox.Users.ApiV1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInformationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountInformationApi(Knedlex.Roblox.Users.ApiV1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knedlex.Roblox.Users.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Users.ApiV1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInformationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountInformationApi(Knedlex.Roblox.Users.ApiV1.Client.ISynchronousClient client, Knedlex.Roblox.Users.ApiV1.Client.IAsynchronousClient asyncClient, Knedlex.Roblox.Users.ApiV1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knedlex.Roblox.Users.ApiV1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiBirthdateResponse</returns>
        public RobloxUsersApiBirthdateResponse V1BirthdateGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiBirthdateResponse> localVarResponse = V1BirthdateGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiBirthdateResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiBirthdateResponse> V1BirthdateGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountInformationApi.V1BirthdateGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiBirthdateResponse>("/v1/birthdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1BirthdateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiBirthdateResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiBirthdateResponse> V1BirthdateGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiBirthdateResponse> localVarResponse = await V1BirthdateGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiBirthdateResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiBirthdateResponse>> V1BirthdateGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountInformationApi.V1BirthdateGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiBirthdateResponse>("/v1/birthdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1BirthdateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object V1BirthdatePost(RobloxUsersApiBirthdateRequest request, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = V1BirthdatePostWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> V1BirthdatePostWithHttpInfo(RobloxUsersApiBirthdateRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling AccountInformationApi->V1BirthdatePost");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AccountInformationApi.V1BirthdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/birthdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1BirthdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1BirthdatePostAsync(RobloxUsersApiBirthdateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = await V1BirthdatePostWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the user&#39;s birthdate 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.BirthdateRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object>> V1BirthdatePostWithHttpInfoAsync(RobloxUsersApiBirthdateRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling AccountInformationApi->V1BirthdatePost");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AccountInformationApi.V1BirthdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/birthdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1BirthdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiDescriptionResponse</returns>
        public RobloxUsersApiDescriptionResponse V1DescriptionGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse> localVarResponse = V1DescriptionGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiDescriptionResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse> V1DescriptionGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountInformationApi.V1DescriptionGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiDescriptionResponse>("/v1/description", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DescriptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiDescriptionResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiDescriptionResponse> V1DescriptionGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse> localVarResponse = await V1DescriptionGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiDescriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse>> V1DescriptionGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountInformationApi.V1DescriptionGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiDescriptionResponse>("/v1/description", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DescriptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiDescriptionResponse</returns>
        public RobloxUsersApiDescriptionResponse V1DescriptionPost(RobloxUsersApiDescriptionRequest request, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse> localVarResponse = V1DescriptionPostWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiDescriptionResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse> V1DescriptionPostWithHttpInfo(RobloxUsersApiDescriptionRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling AccountInformationApi->V1DescriptionPost");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AccountInformationApi.V1DescriptionPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxUsersApiDescriptionResponse>("/v1/description", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DescriptionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiDescriptionResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiDescriptionResponse> V1DescriptionPostAsync(RobloxUsersApiDescriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse> localVarResponse = await V1DescriptionPostWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the user&#39;s description 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.DescriptionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiDescriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiDescriptionResponse>> V1DescriptionPostWithHttpInfoAsync(RobloxUsersApiDescriptionRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling AccountInformationApi->V1DescriptionPost");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AccountInformationApi.V1DescriptionPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxUsersApiDescriptionResponse>("/v1/description", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DescriptionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiGenderResponse</returns>
        public RobloxUsersApiGenderResponse V1GenderGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGenderResponse> localVarResponse = V1GenderGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiGenderResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGenderResponse> V1GenderGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountInformationApi.V1GenderGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiGenderResponse>("/v1/gender", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1GenderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiGenderResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiGenderResponse> V1GenderGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGenderResponse> localVarResponse = await V1GenderGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiGenderResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGenderResponse>> V1GenderGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountInformationApi.V1GenderGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiGenderResponse>("/v1/gender", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1GenderGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object V1GenderPost(RobloxUsersApiGenderRequest request, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = V1GenderPostWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> V1GenderPostWithHttpInfo(RobloxUsersApiGenderRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling AccountInformationApi->V1GenderPost");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AccountInformationApi.V1GenderPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/gender", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1GenderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1GenderPostAsync(RobloxUsersApiGenderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = await V1GenderPostWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the user&#39;s gender 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.GenderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object>> V1GenderPostWithHttpInfoAsync(RobloxUsersApiGenderRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling AccountInformationApi->V1GenderPost");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AccountInformationApi.V1GenderPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/gender", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1GenderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
