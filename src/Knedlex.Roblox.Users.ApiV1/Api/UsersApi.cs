/*
 * Users Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Knedlex.Roblox.Users.ApiV1.Client;
using Knedlex.Roblox.Users.ApiV1.Model;

namespace Knedlex.Roblox.Users.ApiV1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get users by usernames.
        /// </summary>
        /// <remarks>
        /// This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse</returns>
        RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse V1UsernamesUsersPost(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0);

        /// <summary>
        /// Get users by usernames.
        /// </summary>
        /// <remarks>
        /// This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse</returns>
        ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse> V1UsernamesUsersPostWithHttpInfo(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0);
        /// <summary>
        /// Gets the age bracket of the authenticated user.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiUserAgeBracketResponse</returns>
        RobloxUsersApiUserAgeBracketResponse V1UsersAuthenticatedAgeBracketGet(int operationIndex = 0);

        /// <summary>
        /// Gets the age bracket of the authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiUserAgeBracketResponse</returns>
        ApiResponse<RobloxUsersApiUserAgeBracketResponse> V1UsersAuthenticatedAgeBracketGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets the country code of the authenticated user.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiUserCountryCodeResponse</returns>
        RobloxUsersApiUserCountryCodeResponse V1UsersAuthenticatedCountryCodeGet(int operationIndex = 0);

        /// <summary>
        /// Gets the country code of the authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiUserCountryCodeResponse</returns>
        ApiResponse<RobloxUsersApiUserCountryCodeResponse> V1UsersAuthenticatedCountryCodeGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets the minimal authenticated user.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiAuthenticatedUserResponse</returns>
        RobloxUsersApiAuthenticatedUserResponse V1UsersAuthenticatedGet(int operationIndex = 0);

        /// <summary>
        /// Gets the minimal authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiAuthenticatedUserResponse</returns>
        ApiResponse<RobloxUsersApiAuthenticatedUserResponse> V1UsersAuthenticatedGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiUserRolesResponse</returns>
        RobloxUsersApiUserRolesResponse V1UsersAuthenticatedRolesGet(int operationIndex = 0);

        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiUserRolesResponse</returns>
        ApiResponse<RobloxUsersApiUserRolesResponse> V1UsersAuthenticatedRolesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get users by ids.
        /// </summary>
        /// <remarks>
        /// Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse</returns>
        RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse V1UsersPost(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0);

        /// <summary>
        /// Get users by ids.
        /// </summary>
        /// <remarks>
        /// Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse</returns>
        ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse> V1UsersPostWithHttpInfo(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0);
        /// <summary>
        /// Gets detailed user information by id.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiGetUserResponse</returns>
        RobloxUsersApiGetUserResponse V1UsersUserIdGet(long userId, int operationIndex = 0);

        /// <summary>
        /// Gets detailed user information by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiGetUserResponse</returns>
        ApiResponse<RobloxUsersApiGetUserResponse> V1UsersUserIdGetWithHttpInfo(long userId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get users by usernames.
        /// </summary>
        /// <remarks>
        /// This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse</returns>
        System.Threading.Tasks.Task<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse> V1UsernamesUsersPostAsync(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get users by usernames.
        /// </summary>
        /// <remarks>
        /// This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse>> V1UsernamesUsersPostWithHttpInfoAsync(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the age bracket of the authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiUserAgeBracketResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiUserAgeBracketResponse> V1UsersAuthenticatedAgeBracketGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the age bracket of the authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiUserAgeBracketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiUserAgeBracketResponse>> V1UsersAuthenticatedAgeBracketGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the country code of the authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiUserCountryCodeResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiUserCountryCodeResponse> V1UsersAuthenticatedCountryCodeGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the country code of the authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiUserCountryCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiUserCountryCodeResponse>> V1UsersAuthenticatedCountryCodeGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the minimal authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiAuthenticatedUserResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiAuthenticatedUserResponse> V1UsersAuthenticatedGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the minimal authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiAuthenticatedUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiAuthenticatedUserResponse>> V1UsersAuthenticatedGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiUserRolesResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiUserRolesResponse> V1UsersAuthenticatedRolesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiUserRolesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiUserRolesResponse>> V1UsersAuthenticatedRolesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get users by ids.
        /// </summary>
        /// <remarks>
        /// Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse</returns>
        System.Threading.Tasks.Task<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse> V1UsersPostAsync(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get users by ids.
        /// </summary>
        /// <remarks>
        /// Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse>> V1UsersPostWithHttpInfoAsync(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets detailed user information by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiGetUserResponse</returns>
        System.Threading.Tasks.Task<RobloxUsersApiGetUserResponse> V1UsersUserIdGetAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets detailed user information by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiGetUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxUsersApiGetUserResponse>> V1UsersUserIdGetWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Knedlex.Roblox.Users.ApiV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = Knedlex.Roblox.Users.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Users.ApiV1.Client.GlobalConfiguration.Instance,
                new Knedlex.Roblox.Users.ApiV1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Knedlex.Roblox.Users.ApiV1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knedlex.Roblox.Users.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Users.ApiV1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Knedlex.Roblox.Users.ApiV1.Client.ISynchronousClient client, Knedlex.Roblox.Users.ApiV1.Client.IAsynchronousClient asyncClient, Knedlex.Roblox.Users.ApiV1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knedlex.Roblox.Users.ApiV1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get users by usernames. This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse</returns>
        public RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse V1UsernamesUsersPost(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse> localVarResponse = V1UsernamesUsersPostWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get users by usernames. This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse> V1UsernamesUsersPostWithHttpInfo(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling UsersApi->V1UsernamesUsersPost");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "UsersApi.V1UsernamesUsersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse>("/v1/usernames/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsernamesUsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get users by usernames. This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse</returns>
        public async System.Threading.Tasks.Task<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse> V1UsernamesUsersPostAsync(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse> localVarResponse = await V1UsernamesUsersPostWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get users by usernames. This endpoint will also check previous usernames.  Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUsernameRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse>> V1UsernamesUsersPostWithHttpInfoAsync(RobloxUsersApiMultiGetByUsernameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling UsersApi->V1UsernamesUsersPost");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "UsersApi.V1UsernamesUsersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiMultiGetUserByNameResponse>("/v1/usernames/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsernamesUsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the age bracket of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiUserAgeBracketResponse</returns>
        public RobloxUsersApiUserAgeBracketResponse V1UsersAuthenticatedAgeBracketGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserAgeBracketResponse> localVarResponse = V1UsersAuthenticatedAgeBracketGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the age bracket of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiUserAgeBracketResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserAgeBracketResponse> V1UsersAuthenticatedAgeBracketGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedAgeBracketGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiUserAgeBracketResponse>("/v1/users/authenticated/age-bracket", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedAgeBracketGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the age bracket of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiUserAgeBracketResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiUserAgeBracketResponse> V1UsersAuthenticatedAgeBracketGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserAgeBracketResponse> localVarResponse = await V1UsersAuthenticatedAgeBracketGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the age bracket of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiUserAgeBracketResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserAgeBracketResponse>> V1UsersAuthenticatedAgeBracketGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedAgeBracketGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiUserAgeBracketResponse>("/v1/users/authenticated/age-bracket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedAgeBracketGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the country code of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiUserCountryCodeResponse</returns>
        public RobloxUsersApiUserCountryCodeResponse V1UsersAuthenticatedCountryCodeGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserCountryCodeResponse> localVarResponse = V1UsersAuthenticatedCountryCodeGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the country code of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiUserCountryCodeResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserCountryCodeResponse> V1UsersAuthenticatedCountryCodeGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedCountryCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiUserCountryCodeResponse>("/v1/users/authenticated/country-code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedCountryCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the country code of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiUserCountryCodeResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiUserCountryCodeResponse> V1UsersAuthenticatedCountryCodeGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserCountryCodeResponse> localVarResponse = await V1UsersAuthenticatedCountryCodeGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the country code of the authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiUserCountryCodeResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserCountryCodeResponse>> V1UsersAuthenticatedCountryCodeGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedCountryCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiUserCountryCodeResponse>("/v1/users/authenticated/country-code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedCountryCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the minimal authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiAuthenticatedUserResponse</returns>
        public RobloxUsersApiAuthenticatedUserResponse V1UsersAuthenticatedGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiAuthenticatedUserResponse> localVarResponse = V1UsersAuthenticatedGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the minimal authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiAuthenticatedUserResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiAuthenticatedUserResponse> V1UsersAuthenticatedGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiAuthenticatedUserResponse>("/v1/users/authenticated", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the minimal authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiAuthenticatedUserResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiAuthenticatedUserResponse> V1UsersAuthenticatedGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiAuthenticatedUserResponse> localVarResponse = await V1UsersAuthenticatedGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the minimal authenticated user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiAuthenticatedUserResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiAuthenticatedUserResponse>> V1UsersAuthenticatedGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiAuthenticatedUserResponse>("/v1/users/authenticated", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiUserRolesResponse</returns>
        public RobloxUsersApiUserRolesResponse V1UsersAuthenticatedRolesGet(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserRolesResponse> localVarResponse = V1UsersAuthenticatedRolesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiUserRolesResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserRolesResponse> V1UsersAuthenticatedRolesGetWithHttpInfo(int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedRolesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiUserRolesResponse>("/v1/users/authenticated/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedRolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiUserRolesResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiUserRolesResponse> V1UsersAuthenticatedRolesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserRolesResponse> localVarResponse = await V1UsersAuthenticatedRolesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the (public) roles of the authenticated user, such as &#x60;\&quot;Soothsayer\&quot;&#x60; and &#x60;\&quot;BetaTester\&quot;&#x60;. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiUserRolesResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiUserRolesResponse>> V1UsersAuthenticatedRolesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.V1UsersAuthenticatedRolesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiUserRolesResponse>("/v1/users/authenticated/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersAuthenticatedRolesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get users by ids. Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse</returns>
        public RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse V1UsersPost(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse> localVarResponse = V1UsersPostWithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get users by ids. Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse> V1UsersPostWithHttpInfo(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling UsersApi->V1UsersPost");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "UsersApi.V1UsersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse>("/v1/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get users by ids. Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse</returns>
        public async System.Threading.Tasks.Task<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse> V1UsersPostAsync(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse> localVarResponse = await V1UsersPostWithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get users by ids. Does not require X-CSRF-Token protection because this is essentially a get request but as a POST to avoid URI limits.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The Roblox.Users.Api.MultiGetByUserIdRequest.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse>> V1UsersPostWithHttpInfoAsync(RobloxUsersApiMultiGetByUserIdRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling UsersApi->V1UsersPost");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "UsersApi.V1UsersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RobloxWebWebAPIModelsApiArrayResponseRobloxUsersApiVerifiedBadgeUserResponse>("/v1/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets detailed user information by id. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxUsersApiGetUserResponse</returns>
        public RobloxUsersApiGetUserResponse V1UsersUserIdGet(long userId, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGetUserResponse> localVarResponse = V1UsersUserIdGetWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets detailed user information by id. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxUsersApiGetUserResponse</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGetUserResponse> V1UsersUserIdGetWithHttpInfo(long userId, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.V1UsersUserIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxUsersApiGetUserResponse>("/v1/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets detailed user information by id. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxUsersApiGetUserResponse</returns>
        public async System.Threading.Tasks.Task<RobloxUsersApiGetUserResponse> V1UsersUserIdGetAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGetUserResponse> localVarResponse = await V1UsersUserIdGetWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets detailed user information by id. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxUsersApiGetUserResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<RobloxUsersApiGetUserResponse>> V1UsersUserIdGetWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.V1UsersUserIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxUsersApiGetUserResponse>("/v1/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
