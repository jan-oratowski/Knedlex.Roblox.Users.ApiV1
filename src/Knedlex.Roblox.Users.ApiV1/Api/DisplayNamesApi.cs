/*
 * Users Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Knedlex.Roblox.Users.ApiV1.Client;
using Knedlex.Roblox.Users.ApiV1.Model;

namespace Knedlex.Roblox.Users.ApiV1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisplayNamesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Validate a display name for a new user.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object V1DisplayNamesValidateGet(string displayName, DateTime birthdate, int operationIndex = 0);

        /// <summary>
        /// Validate a display name for a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1DisplayNamesValidateGetWithHttpInfo(string displayName, DateTime birthdate, int operationIndex = 0);
        /// <summary>
        /// Set the display name for the authorized user.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object V1UsersUserIdDisplayNamesPatch(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0);

        /// <summary>
        /// Set the display name for the authorized user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1UsersUserIdDisplayNamesPatchWithHttpInfo(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0);
        /// <summary>
        /// Validate a display name for an existing user.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object V1UsersUserIdDisplayNamesValidateGet(long userId, string displayName, int operationIndex = 0);

        /// <summary>
        /// Validate a display name for an existing user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> V1UsersUserIdDisplayNamesValidateGetWithHttpInfo(long userId, string displayName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisplayNamesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Validate a display name for a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1DisplayNamesValidateGetAsync(string displayName, DateTime birthdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate a display name for a new user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1DisplayNamesValidateGetWithHttpInfoAsync(string displayName, DateTime birthdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the display name for the authorized user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1UsersUserIdDisplayNamesPatchAsync(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the display name for the authorized user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1UsersUserIdDisplayNamesPatchWithHttpInfoAsync(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate a display name for an existing user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> V1UsersUserIdDisplayNamesValidateGetAsync(long userId, string displayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate a display name for an existing user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1UsersUserIdDisplayNamesValidateGetWithHttpInfoAsync(long userId, string displayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisplayNamesApi : IDisplayNamesApiSync, IDisplayNamesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DisplayNamesApi : IDisplayNamesApi
    {
        private Knedlex.Roblox.Users.ApiV1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayNamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisplayNamesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayNamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisplayNamesApi(string basePath)
        {
            this.Configuration = Knedlex.Roblox.Users.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Users.ApiV1.Client.GlobalConfiguration.Instance,
                new Knedlex.Roblox.Users.ApiV1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayNamesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DisplayNamesApi(Knedlex.Roblox.Users.ApiV1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knedlex.Roblox.Users.ApiV1.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Users.ApiV1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Users.ApiV1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayNamesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DisplayNamesApi(Knedlex.Roblox.Users.ApiV1.Client.ISynchronousClient client, Knedlex.Roblox.Users.ApiV1.Client.IAsynchronousClient asyncClient, Knedlex.Roblox.Users.ApiV1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knedlex.Roblox.Users.ApiV1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knedlex.Roblox.Users.ApiV1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knedlex.Roblox.Users.ApiV1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Validate a display name for a new user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object V1DisplayNamesValidateGet(string displayName, DateTime birthdate, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = V1DisplayNamesValidateGetWithHttpInfo(displayName, birthdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a display name for a new user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> V1DisplayNamesValidateGetWithHttpInfo(string displayName, DateTime birthdate, int operationIndex = 0)
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'displayName' when calling DisplayNamesApi->V1DisplayNamesValidateGet");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "displayName", displayName));
            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "birthdate", birthdate));

            localVarRequestOptions.Operation = "DisplayNamesApi.V1DisplayNamesValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/display-names/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DisplayNamesValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a display name for a new user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1DisplayNamesValidateGetAsync(string displayName, DateTime birthdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = await V1DisplayNamesValidateGetWithHttpInfoAsync(displayName, birthdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a display name for a new user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The display name.</param>
        /// <param name="birthdate">The new user&#39;s birthdate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object>> V1DisplayNamesValidateGetWithHttpInfoAsync(string displayName, DateTime birthdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'displayName' when calling DisplayNamesApi->V1DisplayNamesValidateGet");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "displayName", displayName));
            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "birthdate", birthdate));

            localVarRequestOptions.Operation = "DisplayNamesApi.V1DisplayNamesValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/display-names/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1DisplayNamesValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the display name for the authorized user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object V1UsersUserIdDisplayNamesPatch(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = V1UsersUserIdDisplayNamesPatchWithHttpInfo(userId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the display name for the authorized user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> V1UsersUserIdDisplayNamesPatchWithHttpInfo(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling DisplayNamesApi->V1UsersUserIdDisplayNamesPatch");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "DisplayNamesApi.V1UsersUserIdDisplayNamesPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/users/{userId}/display-names", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdDisplayNamesPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the display name for the authorized user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1UsersUserIdDisplayNamesPatchAsync(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = await V1UsersUserIdDisplayNamesPatchWithHttpInfoAsync(userId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the display name for the authorized user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">the user id</param>
        /// <param name="request">Roblox.Users.Api.SetDisplayNameRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object>> V1UsersUserIdDisplayNamesPatchWithHttpInfoAsync(long userId, RobloxUsersApiSetDisplayNameRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'request' when calling DisplayNamesApi->V1UsersUserIdDisplayNamesPatch");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "DisplayNamesApi.V1UsersUserIdDisplayNamesPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/users/{userId}/display-names", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdDisplayNamesPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a display name for an existing user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object V1UsersUserIdDisplayNamesValidateGet(long userId, string displayName, int operationIndex = 0)
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = V1UsersUserIdDisplayNamesValidateGetWithHttpInfo(userId, displayName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a display name for an existing user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> V1UsersUserIdDisplayNamesValidateGetWithHttpInfo(long userId, string displayName, int operationIndex = 0)
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'displayName' when calling DisplayNamesApi->V1UsersUserIdDisplayNamesValidateGet");
            }

            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "displayName", displayName));

            localVarRequestOptions.Operation = "DisplayNamesApi.V1UsersUserIdDisplayNamesValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/users/{userId}/display-names/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdDisplayNamesValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a display name for an existing user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> V1UsersUserIdDisplayNamesValidateGetAsync(long userId, string displayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object> localVarResponse = await V1UsersUserIdDisplayNamesValidateGetWithHttpInfoAsync(userId, displayName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a display name for an existing user. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Users.ApiV1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Users.ApiV1.Client.ApiResponse<Object>> V1UsersUserIdDisplayNamesValidateGetWithHttpInfoAsync(long userId, string displayName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'displayName' is set
            if (displayName == null)
            {
                throw new Knedlex.Roblox.Users.ApiV1.Client.ApiException(400, "Missing required parameter 'displayName' when calling DisplayNamesApi->V1UsersUserIdDisplayNamesValidateGet");
            }


            Knedlex.Roblox.Users.ApiV1.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Users.ApiV1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Users.ApiV1.Client.ClientUtils.ParameterToMultiMap("", "displayName", displayName));

            localVarRequestOptions.Operation = "DisplayNamesApi.V1UsersUserIdDisplayNamesValidateGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v1/users/{userId}/display-names/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1UsersUserIdDisplayNamesValidateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
